apply plugin: 'com.android.library'apply plugin: 'maven'android {    compileSdkVersion 30    buildToolsVersion "30.0.0"    defaultConfig {        minSdkVersion 14        targetSdkVersion 30        versionCode 1        versionName "1.0"        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"        consumerProguardFiles "consumer-rules.pro"    }    buildTypes {        release {            minifyEnabled false            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'        }    }    compileOptions {        sourceCompatibility JavaVersion.VERSION_1_8        targetCompatibility JavaVersion.VERSION_1_8    }}dependencies {    implementation 'org.aspectj:aspectjrt:1.9.7'}def group='com.miadapm.aspect' //组def version='1.0.0' //版本def artifactId='methodtime' //唯一标示//将插件打包上传到本地maven仓库uploadArchives {    repositories {        mavenDeployer {            pom.groupId = group            pom.artifactId = artifactId            pom.version = version            //指定本地maven的路径，在项目根目录下            repository(url: uri('../repos'))        }    }}import org.aspectj.bridge.IMessageimport org.aspectj.bridge.MessageHandlerimport org.aspectj.tools.ajc.Mainfinal def log = project.loggerandroid.libraryVariants.all{ variant ->    if (!variant.buildType.isDebuggable()) {        log.debug("Skipping non-debuggable build type '${variant.buildType.name}'.")        return    }    JavaCompile javaCompile = variant.javaCompiler    javaCompile.doLast {        String[] args = ["-showWeaveInfo",                         "-1.8",                         "-inpath", javaCompile.destinationDir.toString(),                         "-aspectpath", javaCompile.classpath.asPath,                         "-d", javaCompile.destinationDir.toString(),                         "-classpath", javaCompile.classpath.asPath,                         "-bootclasspath", project.android.bootClasspath.join(File.pathSeparator)]        log.debug "ajc args: " + Arrays.toString(args)        MessageHandler handler = new MessageHandler(true)        new Main().run(args, handler)        for (IMessage message : handler.getMessages(null, true)) {            switch (message.getKind()) {                case IMessage.ABORT:                case IMessage.ERROR:                case IMessage.FAIL:                    log.error message.message, message.thrown                    break                case IMessage.WARNING:                    log.warn message.message, message.thrown                    break                case IMessage.INFO:                    log.info message.message, message.thrown                    break                case IMessage.DEBUG:                    log.debug message.message, message.thrown                    break            }        }    }}