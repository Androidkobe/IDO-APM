package com.asm.pluginimport com.android.utils.FileUtilsimport org.gradle.internal.component.external.model.ComponentVariantimport org.objectweb.asm.ClassReaderimport org.objectweb.asm.ClassVisitorimport org.objectweb.asm.ClassWriterimport org.objectweb.asm.Labelimport org.objectweb.asm.MethodVisitorimport org.objectweb.asm.Opcodesimport org.objectweb.asm.commons.AdviceAdapterclass AsmMethodMonitor {    /**     * 添加监控代码到class 文件     * @param file     */    static void addMonitorByteCode(File file) {        if(file == null || !file.exists()){            return        }        def fileInputStream = new FileInputStream(file)        def classReader = new ClassReader(fileInputStream)        def classWriter = new ClassWriter(classReader, ClassWriter.COMPUTE_FRAMES);        def classVisitor = new ChangeVisitor(Opcodes.ASM7,classWriter)        classReader.accept(classVisitor,ClassReader.EXPAND_FRAMES)//        def cpFile = new File(file.getAbsolutePath()+ File.separator+file.name+"_cp")//        file.createNewFile()        byte[] data = classWriter.toByteArray()        fileInputStream.close()        def fileOutputStream = new FileOutputStream(file)        fileOutputStream.write(data)        fileOutputStream.close()    }    static class ChangeVisitor extends ClassVisitor {        ChangeVisitor(int api,ClassVisitor classVisitor) {            super(api, classVisitor);        }        @Override        MethodVisitor visitMethod(int access, String name, String desc, String signature, String[] exceptions) {            MethodVisitor methodVisitor = super.visitMethod(access, name, desc, signature, exceptions);            if (name.equals("<init>") || name.equals("<clinit>")) {                return methodVisitor;            }            return new AdviceAdapterImpl(Opcodes.ASM7, methodVisitor, access, name, desc);        }    }    static class AdviceAdapterImpl extends AdviceAdapter{        /**         * Constructs a new {@link AdviceAdapter}.         *         * @param api the ASM API version implemented by this visitor. Must be one of {@link         *     Opcodes#ASM4}, {@link Opcodes#ASM5}, {@link Opcodes#ASM6} or {@link Opcodes#ASM7}.         * @param methodVisitor the method visitor to which this adapter delegates calls.         * @param access the method's access flags (see {@link Opcodes}).         * @param name the method's name.         * @param descriptor the method's descriptor (see {@link Type Type}).         */        protected AdviceAdapterImpl(int api, MethodVisitor methodVisitor, int access, String name, String descriptor) {            super(api, methodVisitor, access, name, descriptor)            System.out.println("AdviceAdapterImpl : name = "+name);        }        @Override        void visitCode() {            super.visitCode()            System.out.println("AdviceAdapterImpl : 开始 name = "+name);        }        @Override        protected void onMethodEnter() {            super.onMethodEnter()            System.out.println("AdviceAdapterImpl : 进入 name = "+name);            Label label2 = new Label();            mv.visitLabel(label2);            mv.visitLineNumber(17, label2);            mv.visitMethodInsn(INVOKESTATIC, "java/lang/System", "currentTimeMillis", "()J", false);            mv.visitVarInsn(LSTORE, 2);        }        @Override        protected void onMethodExit(int opcode) {            super.onMethodExit(opcode)            System.out.println("AdviceAdapterImpl : 退出 name = "+name);            Label label3 = new Label();            mv.visitLabel(label3);            mv.visitLineNumber(18, label3);            mv.visitMethodInsn(INVOKESTATIC, "java/lang/System", "currentTimeMillis", "()J", false);            mv.visitVarInsn(LSTORE, 4);            Label label4 = new Label();            mv.visitLabel(label4);            mv.visitLineNumber(19, label4);            mv.visitFieldInsn(GETSTATIC, "java/lang/System", "out", "Ljava/io/PrintStream;");            mv.visitTypeInsn(NEW, "java/lang/StringBuilder");            mv.visitInsn(DUP);            mv.visitMethodInsn(INVOKESPECIAL, "java/lang/StringBuilder", "<init>", "()V", false);            mv.visitVarInsn(ALOAD, 0);            mv.visitMethodInsn(INVOKEVIRTUAL, "java/lang/Object", "getClass", "()Ljava/lang/Class;", false);            mv.visitMethodInsn(INVOKEVIRTUAL, "java/lang/Class", "getName", "()Ljava/lang/String;", false);            mv.visitMethodInsn(INVOKEVIRTUAL, "java/lang/StringBuilder", "append", "(Ljava/lang/String;)Ljava/lang/StringBuilder;", false);            String methodMsg  = " - method: "+name+" run time : ";            mv.visitLdcInsn(methodMsg);            mv.visitMethodInsn(INVOKEVIRTUAL, "java/lang/StringBuilder", "append", "(Ljava/lang/String;)Ljava/lang/StringBuilder;", false);            mv.visitVarInsn(LLOAD, 4);            mv.visitVarInsn(LLOAD, 2);            mv.visitInsn(LSUB);            mv.visitMethodInsn(INVOKEVIRTUAL, "java/lang/StringBuilder", "append", "(J)Ljava/lang/StringBuilder;", false);            mv.visitMethodInsn(INVOKEVIRTUAL, "java/lang/StringBuilder", "toString", "()Ljava/lang/String;", false);            mv.visitMethodInsn(INVOKEVIRTUAL, "java/io/PrintStream", "println", "(Ljava/lang/String;)V", false);        }        @Override        void visitEnd() {            super.visitEnd()            System.out.println("AdviceAdapterImpl : 结束 name = "+name);        }    }}