package com.asm.plugin;import com.android.build.api.transform.Format;import com.android.build.api.transform.QualifiedContent;import com.android.build.api.transform.Transform;import com.android.build.api.transform.TransformException;import com.android.build.api.transform.TransformInvocation;import com.android.build.gradle.internal.pipeline.TransformManager;import com.android.utils.FileUtils;class AsmTransform extends Transform {    private final String TAG = "ASM-TransFor";    @Override    String getName() {        return TAG    }    @Override    Set<QualifiedContent.ContentType> getInputTypes() {        return TransformManager.CONTENT_CLASS    }    @Override    Set<? super QualifiedContent.Scope> getScopes() {        return TransformManager.SCOPE_FULL_PROJECT    }    @Override    boolean isIncremental() {        return false    }    @Override    void transform(TransformInvocation transformInvocation) throws TransformException, InterruptedException, IOException {        super.transform(transformInvocation);        //当前是否是增量编译        boolean isIncremental = transformInvocation.isIncremental();        System.out.println("current is incremental = " + isIncremental);        //消费型输入，可以从中获取jar包和class文件夹路径。需要输出给下一个任务        def inputs = transformInvocation.getInputs();        //引用型输入，无需输出。        def referencedInputs = transformInvocation.getReferencedInputs();        //OutputProvider管理输出路径，如果消费型输入为空，你会发现OutputProvider == null        def outputProvider = transformInvocation.getOutputProvider();        inputs.forEach() {            it.jarInputs.forEach() { jarInput ->                def dest = outputProvider.getContentLocation(jarInput.file.absolutePath, jarInput.contentTypes, jarInput.scopes, Format.JAR);                def inputFile = jarInput.file                println(TAG + " :skip jar is" + inputFile.getPath() + inputFile.getName());                FileUtils.copyFile(inputFile, dest);            }            it.directoryInputs.forEach() { dirInput ->                def dest = outputProvider.getContentLocation(dirInput.file.absolutePath, dirInput.contentTypes, dirInput.scopes, Format.DIRECTORY);                def dirInputFile = dirInput.file                if (dirInputFile.isDirectory()) {                    dirInputFile.eachFileRecurse { inputClassFile ->                        println(TAG + " :action class is" + inputClassFile.getPath() + inputClassFile.getName());                        if(inputClassFile.name.endsWith("class")){                            AsmMethodMonitor.addMonitorByteCode(inputClassFile)                        }                    }                } else {                    println(TAG + " :action class is" + dirInputFile.getPath() + dirInputFile.getName());                }                FileUtils.copyDirectory(dirInputFile, dest)            }        }    }}