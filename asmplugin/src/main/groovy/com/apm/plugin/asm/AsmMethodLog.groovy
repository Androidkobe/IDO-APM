package com.apm.plugin.asmimport org.objectweb.asm.*import org.objectweb.asm.commons.AdviceAdapterimport org.objectweb.asm.tree.ClassNodeclass AsmMethodLog {    private static TAG = "AsmMethodLog"    /**     * 添加监控代码到class 文件     * @param file     */    static void addMonitorByteCode(File file,String tag) {        TAG = tag//        File dir = new File(path)//        println("file path ==" + dir.getAbsolutePath())//        if (dir.isDirectory()) {//            dir.eachFileRecurse { File file ->//                println("eachFileRecurse file path ==" + file.absolutePath + File.separator + file.name)//                def fileInputStream//                def fileOutputStream//                try {//                    if (file.getName().endsWith("class") && file.exists()) {//                        fileInputStream = new FileInputStream(file)//                        def classReader = new ClassReader(fileInputStream)//                        def classWriter = new ClassWriter(classReader, ClassWriter.COMPUTE_FRAMES);//                        def classVisitor = new ChangeVisitorMethod(Opcodes.ASM7, classWriter)//                        classReader.accept(classVisitor, ClassReader.EXPAND_FRAMES)//                        byte[] data = classWriter.toByteArray()//                        fileInputStream.close()//                        fileInputStream = null//                        fileOutputStream = new FileOutputStream(file)//                        fileOutputStream.write(data)//                        fileOutputStream.close()//                        fileOutputStream = null//                    }//                }//                catch (e) {//                    System.out.println("asm error : " + e.toString());////                } finally {//                    if (fileInputStream != null) {//                        fileInputStream.close()//                    }//                    if (fileOutputStream != null) {//                        fileOutputStream.close()//                    }//                }//            }//        }        if (file != null && file.exists()) {            def fileInputStream            def fileOutputStream            try {                if (file.getName().endsWith("class")                        && !file.getName().contains('R$')                        && !file.getName().contains("R.class")                        && !file.getName().contains("BuildConfig.class")) {                    System.out.println("edit class is" + file.getPath() +"  "+file.getName());//                    fileInputStream = new FileInputStream(file)//                    def classReader = new ClassReader(fileInputStream)//                    def classNode = new ChangeVisitorMethod(Opcodes.ASM7)//                    classReader.accept(classNode, ClassReader.EXPAND_FRAMES);//                    String className = classNode.sourceFile;//                    String classPath = classNode.name//                    String superClass = classNode.superName;//                    System.out.println("类名 ："+className + " 路径 ："+classPath +" 父类 ："+superClass);//                    System.out.println("开始 编辑");//                    classNode.setClassInfo(className,classPath,superClass)//                    def classWriter = new ClassWriter(ClassWriter.COMPUTE_MAXS);//                    classNode.accept(classWriter)//                    fileInputStream.close()//                    fileInputStream = null//                    fileOutputStream = new FileOutputStream(file)//                    fileOutputStream.write(classWriter.toByteArray())//                    fileOutputStream.flush()//                    fileOutputStream = null//                    System.out.println("结束 编辑");                    System.out.println("开始 编辑")                    fileInputStream = new FileInputStream(file)                    def classReader = new ClassReader(fileInputStream)                    def classNode = new ChangeVisitorMethod(Opcodes.ASM7)                    classNode.setTag(TAG)                    classReader.accept(classNode, ClassReader.EXPAND_FRAMES)                    def classWriter = new ClassWriter(ClassWriter.COMPUTE_MAXS)                    classNode.accept(classWriter)                    fileInputStream.close()                    fileInputStream = null                    fileOutputStream = new FileOutputStream(file)                    fileOutputStream.write(classWriter.toByteArray())                    fileOutputStream.flush()                    System.out.println("结束 编辑");                }            }            catch (e) {                System.out.println("asm error : " + e.toString());            } finally {                if (fileInputStream != null) {                    fileInputStream.close()                }                if (fileOutputStream != null) {                    fileOutputStream.close()                }            }        }    }}