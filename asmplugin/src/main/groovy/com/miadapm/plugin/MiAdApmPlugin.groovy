package com.miadapm.plugin;import com.android.build.gradle.AppExtensionimport com.miadapm.plugin.asm.AsmTransformimport org.aspectj.bridge.IMessageimport org.aspectj.bridge.MessageHandlerimport org.aspectj.tools.ajc.Mainimport org.gradle.api.Plugin;import org.gradle.api.Projectimport org.gradle.api.tasks.compile.JavaCompilepublic class MiAdApmPlugin implements Plugin<Project> {    @Override    public void apply(Project project) {//        AsmStart(project)        AspectJStart(project)    }    private void AsmStart(Project project) {        System.out.println("================ ASM Plugin start =============");        AppExtension appExtension = (AppExtension) project.getProperties().get("android");        appExtension.registerTransform(new AsmTransform(), Collections.EMPTY_LIST);    }    private void AspectJStart(Project hostProject) {        System.out.println("================ AspectJ Plugin start =============");        //代码引用        hostProject.dependencies {            implementation 'org.aspectj:aspectjrt:1.9.7'            implementation project(path: ':miadaspect')        }        //扩展使用//        project.extensions.create('hugo', HugoExtension)        final def log = hostProject.logger        final def variants = hostProject.android.applicationVariants        variants.all { variant ->            if (!variant.buildType.isDebuggable()) {                log.debug("Skipping non-debuggable build type '${variant.buildType.name}'.")                return            }            JavaCompile javaCompile = variant.javaCompile            javaCompile.doLast {                String[] args = ["-showWeaveInfo",                                 "-1.9",                                 "-inpath", javaCompile.destinationDir.toString(),                                 "-aspectpath", javaCompile.classpath.asPath,                                 "-d", javaCompile.destinationDir.toString(),                                 "-classpath", javaCompile.classpath.asPath,                                 "-bootclasspath", hostProject.android.bootClasspath.join(File.pathSeparator)]                log.debug "ajc args: " + Arrays.toString(args)                MessageHandler handler = new MessageHandler(true)                new Main().run(args, handler)                for (IMessage message : handler.getMessages(null, true)) {                    switch (message.getKind()) {                        case IMessage.ABORT:                        case IMessage.ERROR:                        case IMessage.FAIL:                            log.error message.message, message.thrown                            break                        case IMessage.WARNING:                            log.warn message.message, message.thrown                            break                        case IMessage.INFO:                            log.info message.message, message.thrown                            break                        case IMessage.DEBUG:                            log.debug message.message, message.thrown                            break                    }                }            }        }    }}